---
- name: Run versioning checks
  ansible.builtin.import_tasks: "versioning.yml"

- name: Ensure data, apps, and mount paths exists locally.
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
  loop:
    - "{{ hms_docker_data_path }}"
    - "{{ hms_docker_apps_path }}"
    - "{{ hms_docker_mount_path }}"
  when: item is defined and item != ''

- name: NAS base configuration tasks.
  ansible.builtin.include_tasks: "nas_{{ hms_docker_media_share_type | lower }}.yml"

- name: Ensure additional NAS configuration
  ansible.builtin.include_tasks: "nas_additional_{{ item.type | lower }}.yml"
  with_items: "{{ nas_client_remote_additional_paths }}"
  when:
    - nas_client_remote_additional_paths is defined
    - nas_client_use_additional_paths is defined and nas_client_use_additional_paths
  no_log: yes

- name: Ensure library folders.
  ansible.builtin.file:
    path: "{{ hmsdocker_library_path }}/{{ item.folder_name }}"
    state: directory
  with_items: "{{ hms_docker_library_folders }}"

# The following tasks that deal with config folders are done this way to ensure that the container config folder
# is given the same ownership as the specified UID and GID of the container before it starts

# First, check if directories already exist
- name: Check if container config directories exist
  ansible.builtin.stat:
    path: "{{ hms_docker_apps_path }}/{{ item.key }}/config"
  with_dict: "{{ hms_docker_container_map }}"
  when:
    - item.value.enabled is defined and item.value.enabled
  register: directory_stats

# Loop through previously queried directory list and only create folders that do not already exist
# This is to ensure that permissions for existing directories are not changed
- name: Ensure container config directories exist if not already
  ansible.builtin.file:
    path: "{{ hms_docker_apps_path }}/{{ item.item.key }}/config"
    state: directory
    owner: "{{ container_uid }}"
    group: "{{ container_gid }}"
    mode: 0755
  with_items: "{{ directory_stats.results }}"
  when:
    - item.item.value.enabled is defined and item.item.value.enabled
    - not item.stat.exists

- name: Ensure separate 4K container config directories exist if enabled
  ansible.builtin.file:
    path: "{{ hms_docker_apps_path }}/{{ item.item.key }}-{{ separate_4k_instances_suffix }}/config"
    state: directory
    owner: "{{ container_uid }}"
    group: "{{ container_gid }}"
    mode: 0755
  with_items: "{{ directory_stats.results }}"
  when: 
    - item.item.value.directory | default(false)
    - item.item.value.enabled | default(false)
    - item.item.key == 'sonarr' or item.item.key == 'radarr'
    - separate_4k_instances_enable | default(false)
    - not item.stat.exists

- name: Ensure Traefik
  ansible.builtin.import_tasks: "traefik.yml"
  when: hmsdocker_container_enabled_traefik

- name: Ensure Authentik
  ansible.builtin.import_tasks: "authentik.yml"
  when: (hmsdocker_authentik_enabled_globally and 
        traefik_ssl_enabled)

- name: Ensure homepage
  ansible.builtin.import_tasks: "homepage.yml"
  when: hmsdocker_container_enabled_homepage

- name: Ensure JBOPS if enabled
  when: tautulli_jbops_enabled | default(false)
  block:
    - name: Ensure global git config ignores dubious ownership permissions
      community.general.git_config:
        name: safe.directory
        scope: global
        value: "{{ tautulli_jbops_install_path }}"
    - name: Ensure JBOPS repo
      ansible.builtin.git:
        repo: https://github.com/blacktwin/JBOPS
        clone: true
        dest: "{{ tautulli_jbops_install_path }}"
      diff: false
      changed_when: false
  
- name: Retrieve app API keys if available
  ansible.builtin.import_tasks: "app_api_key_reader.yml"
  when: hmsdocker_container_enabled_homepage

- name: Ensure env
  ansible.builtin.template:
    src: env.j2
    dest: "{{ hms_docker_data_path }}/.env"
    mode: "{{ secrets_env_mode }}"
    owner: "{{ secrets_env_user }}"
    group: "{{ secrets_env_group }}"
    backup: yes
    lstrip_blocks: yes
    trim_blocks: yes
  no_log: true
  register: compose_env
  vars:
    authentik_key: "{{ (slurped_key_data['content'] | b64decode) if slurped_key_data['content'] is defined else '### Will be obtained during full run ###' }}"
    authentik_pgpass: "{{ (slurped_pg_pass_data['content'] | b64decode) if slurped_pg_pass_data['content'] is defined else '### Will be obtained during full run ###' }}"
    authentik_pgu: "{{ authentik_old_pg_user if authentik_old_pg_user is defined and authentik_old_pg_user != '' else authentik_pg_user }}"
    authentik_pgdb: "{{ authentik_old_pg_db if authentik_old_pg_db is defined and authentik_old_pg_db != '' else authentik_pg_db }}"
    watchtower_key: "{{ (slurped_watchtower_key_data['content'] | b64decode) if slurped_watchtower_key_data['content'] is defined else '### Will be obtained during full run ###' }}"
    sonarr_key: "{{ slurped_api_key_sonarr['content'] | b64decode | regex_search(arr_apikey) | default('') }}"
    sonarr_4k_key: "{{ slurped_api_key_sonarr_4k['content'] | b64decode | regex_search(arr_apikey) | default('') }}"
    radarr_key: "{{ slurped_api_key_radarr['content'] | b64decode | regex_search(arr_apikey) | default('') }}"
    radarr_4k_key: "{{ slurped_api_key_radarr_4k['content'] | b64decode | regex_search(arr_apikey) | default('') }}"
    prowlarr_key: "{{ slurped_api_key_prowlarr['content'] | b64decode | regex_search(arr_apikey) | default('') }}"
    bazarr_key: "{{ slurped_api_key_bazarr['content'] | b64decode | from_yaml }}"
    overseerr_key: "{{ slurped_api_key_overseerr['content'] | b64decode | from_json }}"
    tautulli_key: "{{ slurped_api_key_tautulli['content'] | b64decode | regex_search('(?<=api_key = )\\w*') | default('') }}"
    plex_key: "{{ slurped_api_key_plex['content'] | b64decode | regex_search('(?<=PlexOnlineToken=\")(.*?)(?=\")') | default('') }}"
    sabnzbd_key: "{{ slurped_api_key_sabnzbd['content'] | b64decode | regex_search('(?<=api_key = )\\w*') | default('') }}"
    readarr_key: "{{ slurped_api_key_readarr['content'] | b64decode | regex_search(arr_apikey) | default('') }}"
    lidarr_key: "{{ slurped_api_key_lidarr['content'] | b64decode | regex_search(arr_apikey) | default('') }}"

- name: Ensure App Compose Files
  ansible.builtin.import_tasks: "generate_compose_files.yml"

### Adding here for the future when all the containers will be in their own files
# - name: Generate Docker Compose files for enabled containers 
#   when: item.value.enabled
#   ansible.builtin.template:
#     src: containers/{{ item.key }}.yml.j2
#     dest: "{{ compose_dir.dest | default(hms_docker_data_path + '/compose_files') }}/{{ item.key }}.yml"
#     owner: "{{ container_uid }}"
#     group: "{{ container_gid }}"
#     mode: 0644
#     trim_blocks: yes
#     lstrip_blocks: yes
#   with_dict: "{{ hms_docker_container_map }}" 

- name: Ensure docker-compose.yml file.
  ansible.builtin.template:
    src: docker-compose.yml.j2
    dest: "{{ hms_docker_data_path }}/docker-compose.yml"
    group: docker
    mode: 0644
    backup: yes
    lstrip_blocks: yes
    trim_blocks: yes

- name: Ensure containers defined in compose file.
  community.docker.docker_compose_v2:
    project_src: "{{ hms_docker_data_path }}"
    project_name: "{{ project_name }}"
    state: "{{ hms_docker_compose_container_state }}"
    remove_orphans: "{{ container_remove_orphans }}"
    # env_file: "{{ compose_env.dest }}" # Commented out since this module defaults to using the .env file within the project_src location, but leaving just in case advanced users wish to point to a different location
  when: 
    - not ansible_check_mode

- name: Sabnzbd additional config
  ansible.builtin.import_tasks: "sabnzbd.yml"
  when: hmsdocker_container_enabled_sabnzbd

- name: Ensure Plex SSL script and resources
  ansible.builtin.import_tasks: "plex_ssl.yml"
  when: hms_docker_plex_ssl_enabled and traefik_ssl_enabled

- name: Ensure custom scripts
  ansible.builtin.import_tasks: "scripts.yml"
  when: custom_scripts_enabled | default(false)

- name: Ensure Transmission and VPN connection
  ansible.builtin.import_tasks: "transmission.yml"
  when: 
    - hmsdocker_container_enabled_transmission
    - not ansible_check_mode
    - not is_github_runner | default(false)
